/**
 * CS 241 - Systems Programming
 *
 * Pied Piper - Spring 2017
 */
#include "pied_piper.h"
#include "utils.h"
#include <fcntl.h>
#include <fcntl.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>
#define TRIES 3

char error_str[100][100];
int err_num[100];

void clear_err_msg(int num_cmds) {
	for (int i = 0; i < num_cmds; i++) {
		memset(error_str[i], 0, 100);
	}
}

int pied_piper(int input_fd, int output_fd, char **executables) {
    // Your code goes here...
	if (input_fd == -1) {
		input_fd = 0;
	}
	if (output_fd == -1) {
		output_fd = 1;
	}

	int num_cmds = 0;

	for (char** it = executables; *it != NULL; it++) {
		num_cmds++;
	}
	
	int flag_print = 0;
	int count = 0;
	int pp[2];
	int pp_err[2];
	pipe(pp);
	pipe(pp_err);

RESTART:
	clear_err_msg(num_cmds);
    for (int i = 0; i < num_cmds; i++) {
    	char* this_cmd = executables[i];

    	pid_t my_child = fork();
    	if (my_child == 0) {
    		// I am child

    		if (i == 0) {
    			dup2(input_fd, 0);
    		}
			close(pp[0]);
			if (i == num_cmds - 1) {
				dup2(output_fd, 1);
			} else {
				dup2(pp[1], 1); //stdout replaced by pipe
			}
			close(pp_err[0]);
			dup2(pp_err[1], 2);
			
    		exec_command(this_cmd);
    		fprintf(stderr, "EXEC FAIL!!\n");
    		exit(-1);
    	} else {
    		int st;
    		waitpid(my_child, &st, 0);
    		err_num[i] = WEXITSTATUS(st);
    		if (WEXITSTATUS(st) != 0) {
    			//fprintf(stderr, "!0 status\n");
    			count++;
    			if (count >= 3) {
    				//fprintf(stderr, "BAD INPUT, OVER\n");
					flag_print = 1;
					//break;
    			} else {
    				//fprintf(stderr, "BAD INPUT, AGG\n");
					close(pp[0]);
					close(pp[1]);
    				goto RESTART;
    			}
    		}
			close(pp[1]);
    		dup2(pp[0], 0);
    		
    		close(pp_err[1]);
    		read(pp_err[0], error_str[i], 100);
    		//fprintf(stderr, "%s\n", error_str[i]);
    	}
    }
    
    if (flag_print) {
		for (int i = 0; i < num_cmds; i++) {
			failure_information info;
			info.command = executables[i];
			info.status = err_num[i];
			info.error_message = error_str[i];
			print_failure_report(&info, 1);	
		} 
    	exit(5);
    }
    

    return EXIT_SUCCESS;
}
