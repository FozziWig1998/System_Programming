/**
 * Networking
 * CS 241 - Fall 2017
 */
#include "common.h"
#include "format.h"
#include <ctype.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <sys/stat.h>
#include <fcntl.h>

char **parse_args(int argc, char **argv);
verb check_args(char **args);

struct addrinfo *result;

int fd_connect_to_server(char* host, char* port) {
    int sock_fd = socket(AF_INET, SOCK_STREAM, 0);

    struct addrinfo hints;
    memset(&hints, 0, sizeof(struct addrinfo));
    hints.ai_family = AF_INET; /* IPv4 only */
	hints.ai_socktype = SOCK_STREAM; /* TCP */
    
    int s = getaddrinfo(host, port, &hints, &result);
    if (s != 0) {
    	fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(s));
    	exit(-1);
    }

	if (connect(sock_fd, result->ai_addr, result->ai_addrlen) == -1) {
    	perror("connect");
       exit(-1);
    }
    return sock_fd;
}

char* sousa_get_str(char* str, size_t* size) {
	
	if (strstr(str, "OK") == str) {
		//sscanf("%zu", str + 3, size);
		for (int i = 14; i >= 0; i -= 2) {
			*size += str[i / 2 + 3] << (i * 4);
		} 
		//printf("size = %zu\n", *size);
		return str + 3 + 8;
	} else if (strstr(str, "ERROR") == str) {
		return NULL;
	} else {
		return (char*)(-1);
	}
}

char buffer[1000000];

void change_size_to_array(unsigned char* arr, size_t size) {
	//printf("size is %lx\n", size);
	int i;
	for (i = 0; i < 8; i++) {
		arr[i] = 0xFF & size;
		size = size >> 8;
	}
}

int main(int argc, char **argv) {
    // Good luck!
    char** stuff = parse_args(argc, argv);
    verb do_what = check_args(argv);
	int server_fd = fd_connect_to_server(stuff[0], stuff[1]);
	    
    if (do_what == GET) {
    	char* remote_name = stuff[3];
    	char* local_name = stuff[4];
    	//printf("GET %s\n", remote_name);
    	int local_fd = open(local_name, O_CREAT | O_TRUNC | O_RDWR, S_IRWXU | S_IRWXG | S_IRWXO);
    	dprintf(server_fd, "GET %s\n", remote_name);
    	shutdown(server_fd, SHUT_WR);
    	int num = 0;
    	char* dis = buffer;
    	size_t total_bytes_read = 0;
    	while ((num = read(server_fd, dis, 1) > 0)) {
    		//fprintf(stderr, "this str is %s\n", buf);
    		dis = dis + num;
    		total_bytes_read += num;
    		//write(local_fd, buf, num);
    		//for (int i = 0; i < num; i++) {fprintf(stderr, "%c,", buffer[i]);}
    	}
    	size_t size = 0;
    	char* info = sousa_get_str(buffer, &size);
    	if (info && info != (char*)-1) {
    		// OK
    		if (total_bytes_read - 11 < size) {
    			print_too_little_data();
    			//exit(-1);
    		} else if (total_bytes_read - 11 > size) {
    			print_received_too_much_data();
    			//exit(-1);
    		} else {
    			write(local_fd, info, size);
    		}	
    	} else if (info == NULL) {
    		//error
    		char* t = strstr(buffer, "\n");
    		t = strstr(t + 1, "\n");
    		char tp = *t;
    		*t = 0;
    		print_error_message(buffer + 6);
    		*t = tp;
    	} else {
    		print_invalid_response();
    		//exit(-1);
    	}
    	//if (info) for (int i = 0; i < 30; i++) {fprintf(stderr, "%c", buffer[i] >= 48 ? buffer[i] : '~');}
    	//printf("\n");
    } else if (do_what == PUT) {
    	char* remote_name = stuff[3];
    	char* local_name = stuff[4];
    	FILE* loc_file = fopen(local_name, "r");
    	if (!loc_file) exit(-1);
    	struct stat st;
		stat(local_name, &st);
		size_t size = st.st_size;
		unsigned char size_arr[8];
		change_size_to_array(size_arr, size);
		dprintf(server_fd, "PUT %s\n", remote_name);
		for (int i = 0; i < 8; i++) dprintf(server_fd, "%c", size_arr[i]);
		int scan = 0;
		char temp;
		while ((scan = fscanf(loc_file, "%c", &temp) != EOF)) {
			dprintf(server_fd, "%c", temp);
		}
		shutdown(server_fd, SHUT_WR);
		int num = 0; 
		char buffer_put[1000]; memset(buffer_put, 0, 1000);
		char* dis = buffer_put;
		//fprintf(stderr, "up\n");
		while ((num = read(server_fd, dis, 1)) > 0) {
			//printf("num is %d\n", num);
			dis = dis + num;
		}
		//fprintf(stderr, "dddup\n");
		if (strstr(buffer_put, "OK") == buffer_put) {
			print_success();
		} else if (strstr(buffer_put, "ERROR") == buffer_put) {
			char* t = strstr(buffer_put, "\n");
    		t = strstr(t + 1, "\n");
    		char tp = *t;
    		*t = 0;
    		print_error_message(buffer_put + 6);
    		*t = tp;
		} else {
			print_invalid_response();
		}
		
		//read(server_fd, buffer_put, 20);
		
     } else if (do_what == DELETE) {
     	char* remote_name = stuff[3];
     	//fprintf(stderr, "%s\n",remote_name);
     	dprintf(server_fd, "DELETE %s\n", remote_name);
     	shutdown(server_fd, SHUT_WR);
     	char buffer_put[1000]; memset(buffer_put, 0, 1000);
		char* dis = buffer_put;
		int num = 0;
		while ((num = read(server_fd, dis, 1)) > 0) {
			dis = dis + num;
		}
		if (strstr(buffer_put, "OK") == buffer_put) {
			print_success();
		} else if (strstr(buffer_put, "ERROR") == buffer_put) {
			char* t = strstr(buffer_put, "\n");
    		t = strstr(t + 1, "\n");
    		char tp = *t;
    		*t = 0;
    		print_error_message(buffer_put + 6);
    		*t = tp;
		} else {
			print_invalid_response();
		}
     } else if (do_what == LIST) {
     	dprintf(server_fd, "LIST\n");
     	shutdown(server_fd, SHUT_WR);
				
     }
    
    shutdown(server_fd, 0);
    /*for (char** it = stuff; *it != NULL; it++) {
    	free(*it);
    }*/
    exit(0);
}

/**
 * Given commandline argc and argv, parses argv.
 *
 * argc argc from main()
 * argv argv from main()
 *
 * Returns char* array in form of {host, port, method, remote, local, NULL}
 * where `method` is ALL CAPS
 */
char **parse_args(int argc, char **argv) {
    if (argc < 3) {
        return NULL;
    }

    char *host = strtok(argv[1], ":");
    char *port = strtok(NULL, ":");
    if (port == NULL) {
        return NULL;
    }

    char **args = calloc(1, 6 * sizeof(char *));
    args[0] = host;
    args[1] = port;
    args[2] = argv[2];
    char *temp = args[2];
    while (*temp) {
        *temp = toupper((unsigned char)*temp);
        temp++;
    }
    if (argc > 3) {
        args[3] = argv[3];
    }
    if (argc > 4) {
        args[4] = argv[4];
    }

    return args;
}

/**
 * Validates args to program.  If `args` are not valid, help information for the
 * program is printed.
 *
 * args     arguments to parse
 *
 * Returns a verb which corresponds to the request method
 */
verb check_args(char **args) {
    if (args == NULL) {
        print_client_usage();
        exit(1);
    }

    char *command = args[2];

    if (strcmp(command, "LIST") == 0) {
        return LIST;
    }

    if (strcmp(command, "GET") == 0) {
        if (args[3] != NULL && args[4] != NULL) {
            return GET;
        }
        print_client_help();
        exit(1);
    }

    if (strcmp(command, "DELETE") == 0) {
        if (args[3] != NULL) {
            return DELETE;
        }
        print_client_help();
        exit(1);
    }

    if (strcmp(command, "PUT") == 0) {
        if (args[3] == NULL || args[4] == NULL) {
            print_client_help();
            exit(1);
        }
        return PUT;
    }

    // Not a valid Method
    print_client_help();
    exit(1);
}
