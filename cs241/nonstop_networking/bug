/**
 * Networking
 * CS 241 - Fall 2017
 */
#include "common.h"
#include "format.h"
#include <ctype.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <errno.h>

char **parse_args(int argc, char **argv);
verb check_args(char **args);

struct addrinfo *result;

int fd_connect_to_server(char* host, char* port) {
    int sock_fd = socket(AF_INET, SOCK_STREAM, 0);

    struct addrinfo hints;
    memset(&hints, 0, sizeof(struct addrinfo));
    hints.ai_family = AF_INET; /* IPv4 only */
	hints.ai_socktype = SOCK_STREAM; /* TCP */
    
    int s = getaddrinfo(host, port, &hints, &result);
    if (s != 0) {
    	fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(s));
    	exit(-1);
    }

	if (connect(sock_fd, result->ai_addr, result->ai_addrlen) == -1) {
    	perror("connect");
       exit(-1);
    }
    return sock_fd;
}

char* sousa_get_str(char* str, size_t* size) {
	
	if (strstr(str, "OK") == str) {
		//sscanf("%zu", str + 3, size);
		for (int i = 14; i >= 0; i -= 2) {
			*size += str[i / 2 + 3] << (i * 4);
		} 
		//printf("size = %zu\n", *size);
		return str + 3 + 8;
	} else if (strstr(str, "ERROR") == str) {
		return NULL;
	} else {
		return (char*)(-1);
	}
}

char large_buffer[1000000];

void change_size_to_array(unsigned char* arr, size_t size) {
	//printf("size is %lx\n", size);
	int i;
	for (i = 0; i < 8; i++) {
		arr[i] = 0xFF & size;
		size = size >> 8;
		//fprintf(stderr, "%hhx\n",arr[i]);
	}
	
}

int main(int argc, char **argv) {
    // Good luck!
    //fprintf(stderr, "%s\n", argv[1]);
    if (argc < 3) exit(-1);
    char port[100]; memset(port, 0, 100);
    char host[100]; memset(host, 0, 100);
    char* port_begin = strstr(argv[1], ":");
    strcpy(port, port_begin + 1);
    *port_begin = 0;
    strcpy(host, argv[1]);
    *port_begin = ':';
    
    //char** stuff = parse_args(argc, argv);
    verb do_what = check_args(argv);
	//fprintf(stderr, "host is %s, port is %s\n", host, port);
	int server_fd = fd_connect_to_server(host, port);
	    
    if (do_what == GET) {
    	char* remote_name = argv[3];
    	char* local_name = argv[4];
    	//printf("GET %s\n", remote_name);
    	int local_fd = open(local_name, O_CREAT | O_TRUNC | O_RDWR, S_IRWXU | S_IRWXG | S_IRWXO);
    	dprintf(server_fd, "GET %s\n", remote_name);
    	shutdown(server_fd, SHUT_WR);
    	char buffer_get_header[256]; memset(buffer_get_header, 0, 256);
        int first_read = 0;
        while (1) {
            int errno_saved = errno;
            first_read = read(server_fd, buffer_get_header, 256);
            if (first_read >= 0) break;
            if (first_read == -1 && errno == EAGAIN) {
                errno = errno_saved;
                continue;
            } else {
                fprintf(stderr, "READ ERR\n");
                exit(1);
            }
            errno = errno_saved;
        }
        size_t size = 0;
        size_t real_size = first_read - 11;
        char* info = sousa_get_str(buffer_get_header, &size);
        if (info && info != (char*)-1) {
            // OK
            write(local_fd, info, first_read - 11);
            char tp[4096]; memset(tp, 0, 4096);
            while (1) {
                memset(tp, 0, 4096);
                int errno_saved = errno;
                int second_read = read(server_fd, tp, 4096);
                if (second_read == 0) break;
                if (second_read > 0) {
                    write(local_fd, tp, second_read);
                    real_size += second_read;
                } else {
                    if (first_read == -1 && errno == EAGAIN) {
                        errno = errno_saved;
                        continue;
                    }
                }
                errno = errno_saved;
            }
            if (real_size < size) {
                print_too_little_data();
                //exit(-1);
            } else if (real_size > size) {
                print_received_too_much_data();
            }

        } else if (info == NULL) {
            //error
            char* t = strstr(buffer_get_header, "\n");
            t = strstr(t + 1, "\n");
            char tp = *t;
            *t = 0;
            print_error_message(buffer_get_header + 6);
            *t = tp;
        } else {
            print_invalid_response();
            //exit(-1);
        }
        /*int num = 0;
    	char* dis = large_buffer;
    	size_t total_bytes_read = 0;
    	while ((num = read(server_fd, dis, 1) > 0)) {
    		//fprintf(stderr, "this str is %s\n", buf);
    		dis = dis + num;
    		total_bytes_read += num;
    		//write(local_fd, buf, num);
    		//for (int i = 0; i < num; i++) {fprintf(stderr, "%c,", large_buffer[i]);}
    	}
        */
    	//if (info) for (int i = 0; i < 30; i++) {fprintf(stderr, "%c", large_buffer[i] >= 48 ? large_buffer[i] : '~');}
    	//printf("\n");
    } else if (do_what == PUT) {
    	char* remote_name = argv[3];
    	char* local_name = argv[4];
    	FILE* loc_file = fopen(local_name, "rb");
    	if (!loc_file) exit(-1);
    	struct stat st;
		stat(local_name, &st);
		size_t size = st.st_size;
		unsigned char size_arr[8];
		change_size_to_array(size_arr, size);
        fprintf(stderr, "size of this file is %zu\n",size );
		dprintf(server_fd, "PUT %s\n", remote_name);
		for (int i = 0; i < 8; i++) dprintf(server_fd, "%c", size_arr[i]);
		//fprintf(stderr, "size = %zx\n", size);
		//for (int i = 0; i < 8; i++) fprintf(stderr, "%x\n", size_arr[i]);
		/*int scan = 0;
		char temp;
		while ((scan = fscanf(loc_file, "%c", &temp) != EOF)) {
			dprintf(server_fd, "%c", temp);
		}*/
		char send_file[10000]; memset(send_file, 0, 10000);
		if (size < 9990) {
			fread(send_file, 1, size, loc_file); 
			write(server_fd, send_file, size);
		} else {
			while ((size = fread(send_file, 1, 9900, loc_file))) {
				//fprintf(stderr, "size is %zu\n", size);
				write(server_fd, send_file, size);
				memset(send_file, 0, 10000);
			}
		}
		shutdown(server_fd, SHUT_WR);
		int num = 0; 
		char buffer_put[1000]; memset(buffer_put, 0, 1000);
		char* dis = buffer_put;
		//fprintf(stderr, "up\n");
		while ((num = read(server_fd, dis, 1)) > 0) {
			//printf("num is %d\n", num);
			dis = dis + num;
		}
		//fprintf(stderr, "dddup\n");
		if (strstr(buffer_put, "OK") == buffer_put) {
			print_success();
		} else if (strstr(buffer_put, "ERROR") == buffer_put) {
			char* t = strstr(buffer_put, "\n");
    		t = strstr(t + 1, "\n");
    		char tp = *t;
    		*t = 0;
    		print_error_message(buffer_put + 6);
    		*t = tp;
		} else {
			print_invalid_response();
		}
		
		//read(server_fd, buffer_put, 20);
		
     } else if (do_what == DELETE) {
     	char* remote_name = argv[3];
     	//fprintf(stderr, "%s\n",remote_name);
     	dprintf(server_fd, "DELETE %s\n", remote_name);
     	shutdown(server_fd, SHUT_WR);
     	char buffer_put[1000]; memset(buffer_put, 0, 1000);
		char* dis = buffer_put;
		int num = 0;
		while ((num = read(server_fd, dis, 1)) > 0) {
			dis = dis + num;
		}
		if (strstr(buffer_put, "OK") == buffer_put) {
			print_success();
		} else if (strstr(buffer_put, "ERROR") == buffer_put) {
			char* t = strstr(buffer_put, "\n");
    		t = strstr(t + 1, "\n");
    		char tp = *t;
    		*t = 0;
    		print_error_message(buffer_put + 6);
    		*t = tp;
		} else {
			print_invalid_response();
		}
     } else if (do_what == LIST) {
     	dprintf(server_fd, "LIST\n");
     	shutdown(server_fd, SHUT_WR);
     	//char list_buf[1024]; memset(list_buf, 0, 1024);
     	int num = 0;
     	char* dis = large_buffer;
		// fprintf(stderr, "UP RAED\n" );
        while ((num = read(server_fd, dis, 1)) > 0) {
			// fprintf(stderr, "READ IN LP" );
            dis = dis + num;
		}
		//for (int i = 0; i < 10; i++) fprintf(stderr, "%d\n", large_buffer[i]);
       // fprintf(stderr, "%s hhhhhh\n", large_buffer );
     	size_t size = 0;
     	char* first_time = sousa_get_str(large_buffer, &size);
     	if (first_time == NULL) {
     		char* t = strstr(large_buffer, "\n");
    		t = strstr(t + 1, "\n");
    		char tp = *t;
    		*t = 0;
    		print_error_message(large_buffer + 6);
    		*t = tp;
     	} else if (first_time == (char*)-1) {
     		print_invalid_response();
     	} else {
     		write(1, large_buffer + 11, size);
     	}
     }
    shutdown(server_fd, 0);
    exit(0);
}

/**
 * Given commandline argc and argv, parses argv.
 *
 * argc argc from main()
 * argv argv from main()
 *
 * Returns char* array in form of {host, port, method, remote, local, NULL}
 * where `method` is ALL CAPS
 */
char **parse_args(int argc, char **argv) {
    if (argc < 3) {
        return NULL;
    }

    char *host = strtok(argv[1], ":");
    char *port = strtok(NULL, ":");
    if (port == NULL) {
        return NULL;
    }

    char **args = calloc(1, 6 * sizeof(char *));
    args[0] = host;
    args[1] = port;
    args[2] = argv[2];
    char *temp = args[2];
    while (*temp) {
        *temp = toupper((unsigned char)*temp);
        temp++;
    }
    if (argc > 3) {
        args[3] = argv[3];
    }
    if (argc > 4) {
        args[4] = argv[4];
    }

    return args;
}

/**
 * Validates args to program.  If `args` are not valid, help information for the
 * program is printed.
 *
 * args     arguments to parse
 *
 * Returns a verb which corresponds to the request method
 */
verb check_args(char **args) {
    if (args == NULL) {
        print_client_usage();
        exit(1);
    }

    char *command = args[2];

    if (strcmp(command, "LIST") == 0) {
        return LIST;
    }

    if (strcmp(command, "GET") == 0) {
        if (args[3] != NULL && args[4] != NULL) {
            return GET;
        }
        print_client_help();
        exit(1);
    }

    if (strcmp(command, "DELETE") == 0) {
        if (args[3] != NULL) {
            return DELETE;
        }
        print_client_help();
        exit(1);
    }

    if (strcmp(command, "PUT") == 0) {
        if (args[3] == NULL || args[4] == NULL) {
            print_client_help();
            exit(1);
        }
        return PUT;
    }

    // Not a valid Method
    print_client_help();
    exit(1);
}/**
 * Networking
 * CS 241 - Fall 2017
 */
#pragma once
#include <stdio.h>
#include <stdlib.h>

// Error message to send in response to a malformed request
extern const char *err_bad_request;

// Error message to send if the client sends too little or too much data
extern const char *err_bad_file_size;

// Error message if a client tries to GET or DELETE a non existent file
extern const char *err_no_such_file;

/**
 * Used in client.c in the event that command line arguments are missing or
 * trivially wrong; prints basic usage information.
 */
void print_client_usage(void);

/**
 * Used in client.c in the event that the command line arguments to the client
 * program are invalid; prints more detailed usage information.
 */
void print_client_help(void);

/**
 * Use this function in client.c in the event that the client's connection
 * with the server is closed prematurely, and then exit the program.
 */
void print_connection_closed(void);

/**
 * Use this function in client.c to print out the error message provided by the
 * server in the event that the server's status message is prefaced with
 * "ERROR\n".
 */
void print_error_message(char *err);

/**
 * Use this function in client.c and server.c in the event that the
 * client/server does not send a valid response or header as per the protocol
 * described in the docs.
 */
void print_invalid_response(void);

/**
 * Use this function in client.c and server.c in the event that the
 * client/server is able to receive more bytes of file data than the
 * server/client had specified in its header.
 */
void print_too_little_data(void);

/**
 * Use this function in client.c and server.c in the event that the
 * client/server is able to receive more bytes of file data than the
 * server/client had specified in its header.
 */
void print_received_too_much_data(void);

/**
 * Use this function in client.c if the server successfully fulfilled a PUT or
 * DELETE request.
 */
void print_success(void);

/**
 * Use this function in server.c after creating a temporary directory in order
 * to print out the name of the temporary directory to standard output.
 */
void print_temp_directory(char *temp_directory);/**
 * Networking
 * CS 241 - Fall 2017
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/epoll.h>
#include <errno.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include "vector.h"
#include "format.h"
#include <sys/mman.h>
#include <sys/stat.h>
#include <signal.h>

char* port;
struct addrinfo* result;
vector* file_vec;
size_t file_name_bytes;
char* temp_dir;



void change_size_to_array(unsigned char* arr, size_t size) {
	//printf("size is %lx\n", size);
	int i;
	for (i = 0; i < 8; i++) {
		arr[i] = 0xFF & size;
		size = size >> 8;
		//fprintf(stderr, "%hhx\n",arr[i]);
	}
}

size_t change_arr_to_size(char* start_of_size) {
	unsigned char* cp = (unsigned char*)start_of_size;
	size_t size = 0;
	for (int i = 7; i >= 0; i--) {
		//fprintf(stderr, "%x\n",start_of_size[i]  );
		size_t a = cp[i] << (8 * i);
		size += a;
	}
	return size;
}

void accept_connections(struct epoll_event *e,int epoll_fd) {
	while(1) {
		struct sockaddr_in new_addr;
		socklen_t new_len = sizeof(new_addr);
		int new_fd = accept(e->data.fd, (struct sockaddr*) &new_addr, &new_len);

		if(new_fd == -1) {
			// All pending connections handled
			if(errno == EAGAIN || errno == EWOULDBLOCK)
				break;
			else {
				perror("accept");
				exit(1);
			}
		}

		char* connected_ip = inet_ntoa(new_addr.sin_addr);
		//int port = ntohs(new_addr.sin_port);
        printf("Accepted Connection %s port %s\n", connected_ip, port);

        int flags = fcntl(new_fd, F_GETFL, 0);
        fcntl(new_fd, F_SETFL, flags | O_NONBLOCK);

        //Connection to epoll
        struct epoll_event event;
        event.data.fd = new_fd;
        event.events = EPOLLIN | EPOLLET;
        if(epoll_ctl (epoll_fd, EPOLL_CTL_ADD, new_fd, &event) == -1) {
        	perror("accept epoll_ctl");
        	exit(1);
        }
	}
}
/*
0 is err input
1 is get
2 is put
3 is list
4 is delete
*/
int fenxi_verb(char* str) {
	if (strstr(str, "GET") == str) return 1;
	if (strstr(str, "PUT") == str) return 2;
	if (strstr(str, "LIST") == str) return 3;
	if (strstr(str, "DELETE") == str) return 4;
	return 0;
}

/*
0 is bad req
1 is get
2 is put
3 is list
4 is delete
10 is err_bad_file_size
100 is err_no_such_file
*/

char buff[1024*1000];

void handle_data(struct epoll_event *e) {
	ssize_t count;
	//char buff[4096];
	size_t total_bytes_read = 0;
	int finish = 0;
	int full = 0;
	int op = 0;
	char* buff_ptr = buff;
	
	while(1) {
		//int err_sav = errno;
		count = read(e->data.fd, buff_ptr, 1024*500);
		if (count > 0) {
			total_bytes_read += count;
			if (count < 20) {
				buff_ptr = buff_ptr + count;
			} else if (count == 1024 * 500) {
				full = 1;
				break;
			}
		}
		/*if (count > 0) {
			total_bytes_read += count;
			if (count == 4096) {
				// fprintf(stderr, "First buffer is full\n");
				full = 1;
				break;
			} else {
 				buff_ptr = buff_ptr + count; 
			}
		} */
		// fprintf(stderr, "count now is %ld\n", count);
		
		if(count == -1) {
			if(errno != EAGAIN) {
			//err exit
				perror("read error");
				printf("Closed connection on descriptor %d with error\n", e->data.fd);
				//close(e->data.fd);
				break;
			}
			//errno = err_sav;
		} else if( count == 0) {
			//clean exit
			finish = 1;
			// printf("Closed connection on descriptor %d\n", e->data.fd);
			//close(e->data.fd);
			//errno = err_sav;
			break;
		}
	}
	
	if (total_bytes_read == 5) {
		buff[4] = 0;
		if (strcmp(buff, "LIST") == 0) {
			op = 3;
		} else {
			op = 0;
		}
 	} else {
 		op = fenxi_verb(buff);
 	}
	

	if (op == 0) {
		print_invalid_response();
		dprintf(e->data.fd, "ERROR\n%s\n", err_bad_request);
	} else if (op == 3) {
		//LIST 
		//fprintf(stderr, "IN op3\n");
		
		unsigned char size_arr[8];
		change_size_to_array(size_arr, file_name_bytes + vector_size(file_vec) - 1);
		dprintf(e->data.fd, "OK\n");
		//fprintf(stderr, "dpf is %d\n", dpf);
		write(e->data.fd, size_arr, 8);
		for (size_t i = 0; i < vector_size(file_vec); i++) {
			char* this_str = vector_get(file_vec, i);
			if (i == vector_size(file_vec) - 1) {
				// final element, no \n
				write(e->data.fd, this_str, strlen(this_str));
			} else {
				write(e->data.fd, this_str, strlen(this_str));
				char t = '\n';
				write(e->data.fd, &t, 1);
			}	
		}
		close(e->data.fd);
	} else if (op == 1) {
		// get
		char* blank = strstr(buff, " ");
		char* huanhang = strstr(buff, "\n");
		char file_name[1024]; memset(file_name, 0, 1024);
		*huanhang = 0;
		strcpy(file_name, blank+ 1 );
		*huanhang = '\n';
		int find_file = 0;
		for (size_t i = 0; i < vector_size(file_vec); i++) {
			if (strcmp(file_name, vector_get(file_vec, i)) == 0) {
				find_file = 1;
				break;
			}
		}
		if (!find_file) {
			dprintf(e->data.fd, "ERROR\n%s\n", err_no_such_file);
		} else {
			int local_fd = open(file_name, O_RDONLY, S_IRWXU | S_IRWXG | S_IRWXO);
			dprintf(e->data.fd, "OK\n");
			struct stat st;
			stat(file_name, &st);
			size_t size = st.st_size;
			unsigned char size_arr[8];
			change_size_to_array(size_arr, size);
			write(e->data.fd,size_arr, 8);
			char* file_arr = mmap(NULL, size, PROT_READ, MAP_FILE | MAP_SHARED, local_fd, 0);
			write(e->data.fd, file_arr, size);
		}

		close(e->data.fd);
	} else if (op == 2) {
		// put
		char* huanhang = strstr(buff, "\n");
		char* start_of_size = huanhang + 1;
		for (int i = 0; i < 8; i++) {
			//fprintf(stderr, "%hhx\n", start_of_size[i] );
		}
		size_t size_of_file_uploaded = change_arr_to_size(start_of_size);
		fprintf(stderr, "size of uploaded file is %zu\n",size_of_file_uploaded);
		char file_name[1024]; memset(file_name, 0, 1024);
		char* blank = strstr(buff, " ");
		*huanhang = 0;
		strcpy(file_name, blank + 1);
		*huanhang = '\n'; // get file name;
		if (file_name_bytes == 0) {
			// no file uploaded
			char template[] = "XXXXXX";
			temp_dir = mkdtemp(template);
			print_temp_directory(temp_dir);
			chdir(temp_dir);
		}
		
		int local_fd = open(file_name, O_CREAT | O_TRUNC | O_RDWR, S_IRWXU | S_IRWXG | S_IRWXO);	
		char* content_start = start_of_size + 8;
		ssize_t real_size_file_now = total_bytes_read - (content_start - buff);
		ssize_t wr_bytes = real_size_file_now;
		while (1) {
			if (wr_bytes <= 0) break;
			if (wr_bytes <= 1024) {
				lseek(local_fd, 0, SEEK_END);
				write(local_fd, content_start, wr_bytes);
				//write(1, content_start, wr_bytes);
				wr_bytes = 0;
			} else {
				lseek(local_fd, 0, SEEK_END);
				write(local_fd, content_start, 1024);
				//write(1, content_start, 1024);
				content_start += 1024;
				wr_bytes -= 1024;
			}
		}
		if (full) {
			fprintf(stderr, "is full here\n");
			while (1) {
				char loc_buff[4096];
				int tp = read(e->data.fd, loc_buff, 4096);
				if (tp > 0) {
					lseek(local_fd, 0, SEEK_END);
					write(local_fd, loc_buff, tp);
					real_size_file_now += tp;
				} else if (tp == 0) {
					break;
				}
			}
		}
		// fprintf(stderr, "real_size_file_now is %ld\n",real_size_file_now);
		if ((size_t)real_size_file_now > size_of_file_uploaded) {
			print_received_too_much_data();
			dprintf(e->data.fd,"ERROR\n%s\n",err_bad_file_size);
		} else if ((size_t)real_size_file_now < size_of_file_uploaded) {
			print_too_little_data();
			dprintf(e->data.fd,"ERROR\n%s\n",err_bad_file_size);
		} else {
			dprintf(e->data.fd,"OK\n");
		}
		vector_push_back(file_vec, file_name);
		file_name_bytes += strlen(file_name);
		close(e->data.fd);
	} else if (op == 4) {
		//delete
		char* blank = strstr(buff, " ");
		char* huanhang = strstr(buff, "\n");
		char file_name[1024]; memset(file_name, 0, 1024);
		*huanhang = 0;
		strcpy(file_name, blank + 1);
		*huanhang = '\n';
		//clear vector 
		size_t i, success = 0;
		for (i = 0; i < vector_size(file_vec); i++) {
			char* this_str = vector_get(file_vec, i);
			if (strcmp(this_str, file_name) == 0) {
				vector_erase(file_vec, i);
				file_name_bytes -= strlen(file_name);
				char file_to_del[1024]; memset(file_to_del, 0, 1024);
				strcat(file_to_del, "./");
				strcat(file_to_del, file_name);
				int rm = remove(file_to_del);
				if (rm < 0) fprintf(stderr, "rm failed\n");
				success = 1;
				break;
			} 
		}
		if (!success) {
			// cannot find
			dprintf(e->data.fd, "ERROR\n%s\n", err_no_such_file);
		} else {
			dprintf(e->data.fd, "OK\n");
		}
		close(e->data.fd);
	}

}



int main(int argc, char **argv) {
    // good luck!
    if (argc != 2) exit(1);
	port = argv[1];
	file_vec = string_vector_create(); // not free
	int s;
	//struct epoll_event *events;

    // Create the socket as a nonblocking socket
    int sock_fd = socket(AF_INET, SOCK_STREAM | SOCK_NONBLOCK, 0);

    struct addrinfo hints;
    memset(&hints, 0, sizeof(struct addrinfo));
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_flags = AI_PASSIVE;

    s = getaddrinfo(NULL, port , &hints, &result); // not free
    if (s != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(s));
        exit(1);
    }

    int optval = 1;
    setsockopt(sock_fd, SOL_SOCKET, SO_REUSEADDR, &optval, sizeof(optval));

    if ( bind(sock_fd, result->ai_addr, result->ai_addrlen) != 0 )
    {
        perror("bind()");
        exit(1);
    }

    if ( listen(sock_fd, 10) != 0 )
    {
        perror("listen()");
        exit(1);
    }

    struct sockaddr_in sin;
    socklen_t socklen = sizeof(sin);
    if (getsockname(sock_fd, (struct sockaddr *)&sin, &socklen) == -1)
      perror("getsockname");
    else
      printf("Listening on port number %d\n", ntohs(sin.sin_port));

	//setup epoll
	int epoll_fd = epoll_create(1);
	if(epoll_fd == -1)
    {
        perror("epoll_create()");
        exit(1);
    }

	struct epoll_event event;
	event.data.fd = sock_fd;
	event.events = EPOLLIN | EPOLLET;

	//Add the sever socket to the epoll
	if(epoll_ctl(epoll_fd, EPOLL_CTL_ADD, sock_fd, &event))
	{
        perror("epoll_ctl()");
        exit(1);
	}

	// Event loop
	while(1) {
		struct epoll_event new_event;

		if(epoll_wait(epoll_fd, &new_event, 1, -1) > 0)
		{
			//Probably check for errors

			// New Connection Ready
			if(sock_fd == new_event.data.fd)
				accept_connections(&new_event, epoll_fd);
			else
				handle_data(&new_event);
		}
	}
    return 0;
}/**
 * Networking
 * CS 241 - Fall 2017
 */
#include "format.h"

const char *err_bad_request =
    "Bad request\n"; // Error message to send in response to a malformed request
const char *err_bad_file_size = "Bad file size\n"; // Error message to send if
                                                   // the client sends too
                                                   // little or too much data
const char *err_no_such_file = "No such file\n"; // Error message if a client
                                                 // tries to GET or DELETE a non
                                                 // existent file

void print_client_usage() {
    printf("./client <host>:<port> <method> [remote] [local]\n \
        <host>\t\tAddress to conenct to.\n \
        <port>\t\tPort to set up connection on.\n \
        <method>\tMethod of request to send.\n \
        [remote]\tOptional argument refering to remote filename\n \
        [local]\tOptional argument refering to file on local system\n \
        If <method> is any PUT, GET, or DELETE then [remote] and/or [local] are required\n");
}

void print_client_help() {
    print_client_usage();
    printf("Methods:\n \
        LIST\t\t\tRequests a list of files on the server.\n \
        PUT <remote> <local>\tUploads <local> file to serve as filename <remote>.\n \
        GET <remote>\t\tDownloads file named <remote> from server.\n \
        DELETE <remote>\tDeletes file named <remote> on server.\n");
}

void print_connection_closed() {
    printf("Connection closed\n");
}

void print_error_message(char *err) {
    printf("%s\n", err);
}

void print_invalid_response() {
    printf("Invalid response\n");
}

void print_received_too_much_data() {
    printf("Received too much data\n");
}

void print_too_little_data() {
    printf("Received too little data\n");
}

void print_success() {
    printf("DELETE/PUT successful\n");
}

void print_temp_directory(char *temp_directory) {
    fprintf(stdout, "%s\n", temp_directory);
}/**
 * Networking
 * CS 241 - Fall 2017
 */
#include "common.h"
#include "format.h"
#include <ctype.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <errno.h>

char **parse_args(int argc, char **argv);
verb check_args(char **args);

struct addrinfo *result;

int fd_connect_to_server(char* host, char* port) {
    int sock_fd = socket(AF_INET, SOCK_STREAM, 0);

    struct addrinfo hints;
    memset(&hints, 0, sizeof(struct addrinfo));
    hints.ai_family = AF_INET; /* IPv4 only */
	hints.ai_socktype = SOCK_STREAM; /* TCP */
    
    int s = getaddrinfo(host, port, &hints, &result);
    if (s != 0) {
    	fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(s));
    	exit(-1);
    }

	if (connect(sock_fd, result->ai_addr, result->ai_addrlen) == -1) {
    	perror("connect");
       exit(-1);
    }
    return sock_fd;
}

char* sousa_get_str(char* str, size_t* size) {
	
	if (strstr(str, "OK") == str) {
		//sscanf("%zu", str + 3, size);
		for (int i = 14; i >= 0; i -= 2) {
			*size += str[i / 2 + 3] << (i * 4);
		} 
		//printf("size = %zu\n", *size);
		return str + 3 + 8;
	} else if (strstr(str, "ERROR") == str) {
		return NULL;
	} else {
		return (char*)(-1);
	}
}

char large_buffer[1000000];

void change_size_to_array(unsigned char* arr, size_t size) {
	//printf("size is %lx\n", size);
	int i;
	for (i = 0; i < 8; i++) {
		arr[i] = 0xFF & size;
		size = size >> 8;
		//fprintf(stderr, "%hhx\n",arr[i]);
	}
	
}

int main(int argc, char **argv) {
    // Good luck!
    //fprintf(stderr, "%s\n", argv[1]);
    if (argc < 3) exit(-1);
    char port[100]; memset(port, 0, 100);
    char host[100]; memset(host, 0, 100);
    char* port_begin = strstr(argv[1], ":");
    strcpy(port, port_begin + 1);
    *port_begin = 0;
    strcpy(host, argv[1]);
    *port_begin = ':';
    
    //char** stuff = parse_args(argc, argv);
    verb do_what = check_args(argv);
	//fprintf(stderr, "host is %s, port is %s\n", host, port);
	int server_fd = fd_connect_to_server(host, port);
	    
    if (do_what == GET) {
    	char* remote_name = argv[3];
    	char* local_name = argv[4];
    	//printf("GET %s\n", remote_name);
    	int local_fd = open(local_name, O_CREAT | O_TRUNC | O_RDWR, S_IRWXU | S_IRWXG | S_IRWXO);
    	dprintf(server_fd, "GET %s\n", remote_name);
    	shutdown(server_fd, SHUT_WR);
    	char buffer_get_header[256]; memset(buffer_get_header, 0, 256);
        int first_read = 0;
        while (1) {
            int errno_saved = errno;
            first_read = read(server_fd, buffer_get_header, 256);
            if (first_read >= 0) break;
            if (first_read == -1 && errno == EAGAIN) {
                errno = errno_saved;
                continue;
            } else {
                fprintf(stderr, "READ ERR\n");
                exit(1);
            }
            errno = errno_saved;
        }
        size_t size = 0;
        size_t real_size = first_read - 11;
        char* info = sousa_get_str(buffer_get_header, &size);
        if (info && info != (char*)-1) {
            // OK
            write(local_fd, info, first_read - 11);
            char tp[4096]; memset(tp, 0, 4096);
            while (1) {
                memset(tp, 0, 4096);
                int errno_saved = errno;
                int second_read = read(server_fd, tp, 4096);
                if (second_read == 0) break;
                if (second_read > 0) {
                    write(local_fd, tp, second_read);
                    real_size += second_read;
                } else {
                    if (first_read == -1 && errno == EAGAIN) {
                        errno = errno_saved;
                        continue;
                    }
                }
                errno = errno_saved;
            }
            if (real_size < size) {
                print_too_little_data();
                //exit(-1);
            } else if (real_size > size) {
                print_received_too_much_data();
            }

        } else if (info == NULL) {
            //error
            char* t = strstr(buffer_get_header, "\n");
            t = strstr(t + 1, "\n");
            char tp = *t;
            *t = 0;
            print_error_message(buffer_get_header + 6);
            *t = tp;
        } else {
            print_invalid_response();
            //exit(-1);
        }
        /*int num = 0;
    	char* dis = large_buffer;
    	size_t total_bytes_read = 0;
    	while ((num = read(server_fd, dis, 1) > 0)) {
    		//fprintf(stderr, "this str is %s\n", buf);
    		dis = dis + num;
    		total_bytes_read += num;
    		//write(local_fd, buf, num);
    		//for (int i = 0; i < num; i++) {fprintf(stderr, "%c,", large_buffer[i]);}
    	}
        */
    	//if (info) for (int i = 0; i < 30; i++) {fprintf(stderr, "%c", large_buffer[i] >= 48 ? large_buffer[i] : '~');}
    	//printf("\n");
    } else if (do_what == PUT) {
    	char* remote_name = argv[3];
    	char* local_name = argv[4];
    	FILE* loc_file = fopen(local_name, "rb");
    	if (!loc_file) exit(-1);
    	struct stat st;
		stat(local_name, &st);
		size_t size = st.st_size;
		unsigned char size_arr[8];
		change_size_to_array(size_arr, size);
        fprintf(stderr, "size of this file is %zu\n",size );
		dprintf(server_fd, "PUT %s\n", remote_name);
		for (int i = 0; i < 8; i++) dprintf(server_fd, "%c", size_arr[i]);
		//fprintf(stderr, "size = %zx\n", size);
		//for (int i = 0; i < 8; i++) fprintf(stderr, "%x\n", size_arr[i]);
		/*int scan = 0;
		char temp;
		while ((scan = fscanf(loc_file, "%c", &temp) != EOF)) {
			dprintf(server_fd, "%c", temp);
		}*/
		char send_file[10000]; memset(send_file, 0, 10000);
		if (size < 9990) {
			fread(send_file, 1, size, loc_file); 
			write(server_fd, send_file, size);
		} else {
			while ((size = fread(send_file, 1, 9900, loc_file))) {
				//fprintf(stderr, "size is %zu\n", size);
				write(server_fd, send_file, size);
				memset(send_file, 0, 10000);
			}
		}
		shutdown(server_fd, SHUT_WR);
		int num = 0; 
		char buffer_put[1000]; memset(buffer_put, 0, 1000);
		char* dis = buffer_put;
		//fprintf(stderr, "up\n");
		while ((num = read(server_fd, dis, 1)) > 0) {
			//printf("num is %d\n", num);
			dis = dis + num;
		}
		//fprintf(stderr, "dddup\n");
		if (strstr(buffer_put, "OK") == buffer_put) {
			print_success();
		} else if (strstr(buffer_put, "ERROR") == buffer_put) {
			char* t = strstr(buffer_put, "\n");
    		t = strstr(t + 1, "\n");
    		char tp = *t;
    		*t = 0;
    		print_error_message(buffer_put + 6);
    		*t = tp;
		} else {
			print_invalid_response();
		}
		
		//read(server_fd, buffer_put, 20);
		
     } else if (do_what == DELETE) {
     	char* remote_name = argv[3];
     	//fprintf(stderr, "%s\n",remote_name);
     	dprintf(server_fd, "DELETE %s\n", remote_name);
     	shutdown(server_fd, SHUT_WR);
     	char buffer_put[1000]; memset(buffer_put, 0, 1000);
		char* dis = buffer_put;
		int num = 0;
		while ((num = read(server_fd, dis, 1)) > 0) {
			dis = dis + num;
		}
		if (strstr(buffer_put, "OK") == buffer_put) {
			print_success();
		} else if (strstr(buffer_put, "ERROR") == buffer_put) {
			char* t = strstr(buffer_put, "\n");
    		t = strstr(t + 1, "\n");
    		char tp = *t;
    		*t = 0;
    		print_error_message(buffer_put + 6);
    		*t = tp;
		} else {
			print_invalid_response();
		}
     } else if (do_what == LIST) {
     	dprintf(server_fd, "LIST\n");
     	shutdown(server_fd, SHUT_WR);
     	//char list_buf[1024]; memset(list_buf, 0, 1024);
     	int num = 0;
     	char* dis = large_buffer;
		// fprintf(stderr, "UP RAED\n" );
        while ((num = read(server_fd, dis, 1)) > 0) {
			// fprintf(stderr, "READ IN LP" );
            dis = dis + num;
		}
		//for (int i = 0; i < 10; i++) fprintf(stderr, "%d\n", large_buffer[i]);
       // fprintf(stderr, "%s hhhhhh\n", large_buffer );
     	size_t size = 0;
     	char* first_time = sousa_get_str(large_buffer, &size);
     	if (first_time == NULL) {
     		char* t = strstr(large_buffer, "\n");
    		t = strstr(t + 1, "\n");
    		char tp = *t;
    		*t = 0;
    		print_error_message(large_buffer + 6);
    		*t = tp;
     	} else if (first_time == (char*)-1) {
     		print_invalid_response();
     	} else {
     		write(1, large_buffer + 11, size);
     	}
     }
    shutdown(server_fd, 0);
    exit(0);
}

/**
 * Given commandline argc and argv, parses argv.
 *
 * argc argc from main()
 * argv argv from main()
 *
 * Returns char* array in form of {host, port, method, remote, local, NULL}
 * where `method` is ALL CAPS
 */
char **parse_args(int argc, char **argv) {
    if (argc < 3) {
        return NULL;
    }

    char *host = strtok(argv[1], ":");
    char *port = strtok(NULL, ":");
    if (port == NULL) {
        return NULL;
    }

    char **args = calloc(1, 6 * sizeof(char *));
    args[0] = host;
    args[1] = port;
    args[2] = argv[2];
    char *temp = args[2];
    while (*temp) {
        *temp = toupper((unsigned char)*temp);
        temp++;
    }
    if (argc > 3) {
        args[3] = argv[3];
    }
    if (argc > 4) {
        args[4] = argv[4];
    }

    return args;
}

/**
 * Validates args to program.  If `args` are not valid, help information for the
 * program is printed.
 *
 * args     arguments to parse
 *
 * Returns a verb which corresponds to the request method
 */
verb check_args(char **args) {
    if (args == NULL) {
        print_client_usage();
        exit(1);
    }

    char *command = args[2];

    if (strcmp(command, "LIST") == 0) {
        return LIST;
    }

    if (strcmp(command, "GET") == 0) {
        if (args[3] != NULL && args[4] != NULL) {
            return GET;
        }
        print_client_help();
        exit(1);
    }

    if (strcmp(command, "DELETE") == 0) {
        if (args[3] != NULL) {
            return DELETE;
        }
        print_client_help();
        exit(1);
    }

    if (strcmp(command, "PUT") == 0) {
        if (args[3] == NULL || args[4] == NULL) {
            print_client_help();
            exit(1);
        }
        return PUT;
    }

    // Not a valid Method
    print_client_help();
    exit(1);
}
